`include "cmos_cells_delay.v"
/* Generated by Yosys 0.7+560 (git sha1 d9a2b430, gcc 7.3.1 -fPIC -Os) */

module ascensor_synth_delay(CLK, go_down, go_up, halt, top_lim, bott_lim, estado, prox_estado);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  input CLK;
  output bott_lim;
  output [4:0] estado;
  reg [4:0] estado;
  input go_down;
  input go_up;
  input halt;
  output [4:0] prox_estado;
  output top_lim;
  NOT_delay _064_ (
    .A(estado[2]),
    .Y(_000_)
  );
  NOT_delay _065_ (
    .A(estado[4]),
    .Y(_001_)
  );
  NOT_delay _066_ (
    .A(estado[0]),
    .Y(_002_)
  );
  NOT_delay _067_ (
    .A(estado[3]),
    .Y(_003_)
  );
  NOT_delay _068_ (
    .A(go_down),
    .Y(_004_)
  );
  NOT_delay _069_ (
    .A(go_up),
    .Y(_005_)
  );
  NOT_delay _070_ (
    .A(halt),
    .Y(_006_)
  );
  NOR_delay _071_ (
    .A(estado[0]),
    .B(estado[1]),
    .Y(_007_)
  );
  NOT_delay _072_ (
    .A(_007_),
    .Y(_008_)
  );
  NOR_delay _073_ (
    .A(estado[4]),
    .B(_008_),
    .Y(_009_)
  );
  NAND_delay _074_ (
    .A(_001_),
    .B(_007_),
    .Y(_010_)
  );
  NAND_delay _075_ (
    .A(estado[2]),
    .B(_003_),
    .Y(_011_)
  );
  NOR_delay _076_ (
    .A(_000_),
    .B(_010_),
    .Y(_012_)
  );
  NOR_delay _077_ (
    .A(_010_),
    .B(_011_),
    .Y(_013_)
  );
  NAND_delay _078_ (
    .A(_003_),
    .B(_012_),
    .Y(_014_)
  );
  NOR_delay _079_ (
    .A(estado[2]),
    .B(estado[3]),
    .Y(_015_)
  );
  NAND_delay _080_ (
    .A(_000_),
    .B(_003_),
    .Y(_016_)
  );
  NAND_delay _081_ (
    .A(estado[4]),
    .B(_007_),
    .Y(_017_)
  );
  NOR_delay _082_ (
    .A(_016_),
    .B(_017_),
    .Y(_018_)
  );
  NOR_delay _083_ (
    .A(_013_),
    .B(_018_),
    .Y(_019_)
  );
  NOR_delay _084_ (
    .A(estado[2]),
    .B(_003_),
    .Y(_020_)
  );
  NAND_delay _085_ (
    .A(_000_),
    .B(estado[3]),
    .Y(_021_)
  );
  NOR_delay _086_ (
    .A(_010_),
    .B(_021_),
    .Y(_022_)
  );
  NAND_delay _087_ (
    .A(_009_),
    .B(_020_),
    .Y(_023_)
  );
  NOR_delay _088_ (
    .A(estado[4]),
    .B(_016_),
    .Y(_024_)
  );
  NAND_delay _089_ (
    .A(_001_),
    .B(_015_),
    .Y(_025_)
  );
  NOR_delay _090_ (
    .A(_002_),
    .B(estado[1]),
    .Y(_026_)
  );
  NAND_delay _091_ (
    .A(_024_),
    .B(_026_),
    .Y(_027_)
  );
  NAND_delay _092_ (
    .A(_023_),
    .B(_027_),
    .Y(_028_)
  );
  NAND_delay _093_ (
    .A(_002_),
    .B(estado[1]),
    .Y(_029_)
  );
  NOR_delay _094_ (
    .A(_025_),
    .B(_029_),
    .Y(_030_)
  );
  NOR_delay _095_ (
    .A(_028_),
    .B(_030_),
    .Y(_031_)
  );
  NAND_delay _096_ (
    .A(_019_),
    .B(_031_),
    .Y(_032_)
  );
  NAND_delay _097_ (
    .A(estado[0]),
    .B(_004_),
    .Y(_033_)
  );
  NOR_delay _098_ (
    .A(go_up),
    .B(_033_),
    .Y(_034_)
  );
  NOR_delay _099_ (
    .A(halt),
    .B(_034_),
    .Y(_035_)
  );
  NOR_delay _100_ (
    .A(_027_),
    .B(_035_),
    .Y(_036_)
  );
  NAND_delay _101_ (
    .A(halt),
    .B(_030_),
    .Y(_037_)
  );
  NOR_delay _102_ (
    .A(_006_),
    .B(_023_),
    .Y(_038_)
  );
  NAND_delay _103_ (
    .A(halt),
    .B(_022_),
    .Y(_039_)
  );
  NAND_delay _104_ (
    .A(_037_),
    .B(_039_),
    .Y(_040_)
  );
  NOR_delay _105_ (
    .A(_036_),
    .B(_040_),
    .Y(_041_)
  );
  NAND_delay _106_ (
    .A(_032_),
    .B(_041_),
    .Y(prox_estado[0])
  );
  NOR_delay _107_ (
    .A(halt),
    .B(_027_),
    .Y(_042_)
  );
  NOR_delay _108_ (
    .A(_018_),
    .B(_042_),
    .Y(_043_)
  );
  NOR_delay _109_ (
    .A(estado[1]),
    .B(go_up),
    .Y(_044_)
  );
  NOR_delay _110_ (
    .A(go_down),
    .B(_044_),
    .Y(_045_)
  );
  NOT_delay _111_ (
    .A(_045_),
    .Y(_046_)
  );
  NOR_delay _112_ (
    .A(_043_),
    .B(_046_),
    .Y(prox_estado[1])
  );
  NAND_delay _113_ (
    .A(_006_),
    .B(_030_),
    .Y(_047_)
  );
  NAND_delay _114_ (
    .A(estado[2]),
    .B(_004_),
    .Y(_048_)
  );
  NAND_delay _115_ (
    .A(_005_),
    .B(_048_),
    .Y(_049_)
  );
  NAND_delay _116_ (
    .A(_013_),
    .B(_049_),
    .Y(_050_)
  );
  NAND_delay _117_ (
    .A(_047_),
    .B(_050_),
    .Y(prox_estado[2])
  );
  NOR_delay _118_ (
    .A(go_up),
    .B(_014_),
    .Y(_051_)
  );
  NOR_delay _119_ (
    .A(_042_),
    .B(_051_),
    .Y(_052_)
  );
  NOR_delay _120_ (
    .A(_003_),
    .B(go_up),
    .Y(_053_)
  );
  NOR_delay _121_ (
    .A(go_down),
    .B(_053_),
    .Y(_054_)
  );
  NOR_delay _122_ (
    .A(_052_),
    .B(_054_),
    .Y(prox_estado[3])
  );
  NOR_delay _123_ (
    .A(halt),
    .B(_023_),
    .Y(_055_)
  );
  NOT_delay _124_ (
    .A(_055_),
    .Y(_056_)
  );
  NAND_delay _125_ (
    .A(_004_),
    .B(go_up),
    .Y(_057_)
  );
  NAND_delay _126_ (
    .A(_018_),
    .B(_057_),
    .Y(_058_)
  );
  NAND_delay _127_ (
    .A(_056_),
    .B(_058_),
    .Y(prox_estado[4])
  );
  NAND_delay _128_ (
    .A(go_down),
    .B(_018_),
    .Y(_059_)
  );
  NOT_delay _129_ (
    .A(_059_),
    .Y(_060_)
  );
  NOR_delay _130_ (
    .A(_055_),
    .B(_060_),
    .Y(_061_)
  );
  NAND_delay _131_ (
    .A(_037_),
    .B(_061_),
    .Y(bott_lim)
  );
  NOR_delay _132_ (
    .A(_005_),
    .B(_014_),
    .Y(_062_)
  );
  NOR_delay _133_ (
    .A(_038_),
    .B(_062_),
    .Y(_063_)
  );
  NAND_delay _134_ (
    .A(_047_),
    .B(_063_),
    .Y(top_lim)
  );
  always @(posedge CLK)
      estado[0] <= #15  prox_estado[0];
  always @(posedge CLK)
      estado[1] <= #15  prox_estado[1];
  always @(posedge CLK)
      estado[2] <= #15  prox_estado[2];
  always @(posedge CLK)
      estado[3] <= #15  prox_estado[3];
  always @(posedge CLK)
      estado[4] <= #15  prox_estado[4];
endmodule
