`include "cmos_cells.v"
/* Generated by Yosys 0.7 (git sha1 UNKNOWN, clang 5.0.1 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fno-plt -fPIC -Os) */

module ffd_p2s_synth(CLK, D, ENB, valid_in, Q, valid_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  input CLK;
  input D;
  input ENB;
  output Q;
  reg Q;
  input valid_in;
  output valid_out;
  NOR _05_ (
    .A(valid_in),
    .B(Q),
    .Y(_01_)
  );
  NOT _06_ (
    .A(D),
    .Y(_02_)
  );
  NAND _07_ (
    .A(valid_in),
    .B(_02_),
    .Y(_03_)
  );
  NAND _08_ (
    .A(_03_),
    .B(ENB),
    .Y(_04_)
  );
  NOR _09_ (
    .A(_04_),
    .B(_01_),
    .Y(_00_)
  );
  always @(posedge CLK)
      Q <= _00_;
  assign valid_out = 1'b1;
endmodule

module ffd_s2p_synth(CLK, D, ENB, Q);
  wire _0_;
  wire _1_;
  wire _2_;
  input CLK;
  input D;
  input ENB;
  output Q;
  reg Q;
  NOT _3_ (
    .A(D),
    .Y(_1_)
  );
  NOT _4_ (
    .A(ENB),
    .Y(_2_)
  );
  NOR _5_ (
    .A(_2_),
    .B(_1_),
    .Y(_0_)
  );
  always @(posedge CLK)
      Q <= _0_;
endmodule

module mux_ctr_synth(valid_count, CLK, reset, CTR);
  wire [2:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  input CLK;
  output [2:0] CTR;
  reg [2:0] CTR;
  input reset;
  input valid_count;
  NAND _15_ (
    .A(valid_count),
    .B(CTR[0]),
    .Y(_14_)
  );
  NOT _16_ (
    .A(CTR[0]),
    .Y(_01_)
  );
  NOT _17_ (
    .A(valid_count),
    .Y(_02_)
  );
  NAND _18_ (
    .A(_02_),
    .B(_01_),
    .Y(_03_)
  );
  NAND _19_ (
    .A(_03_),
    .B(_14_),
    .Y(_04_)
  );
  NAND _20_ (
    .A(_04_),
    .B(reset),
    .Y(_00_[0])
  );
  NOR _21_ (
    .A(_02_),
    .B(_01_),
    .Y(_05_)
  );
  NAND _22_ (
    .A(_05_),
    .B(CTR[1]),
    .Y(_06_)
  );
  NOT _23_ (
    .A(CTR[1]),
    .Y(_07_)
  );
  NAND _24_ (
    .A(_14_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _25_ (
    .A(_08_),
    .B(_06_),
    .Y(_09_)
  );
  NAND _26_ (
    .A(_09_),
    .B(reset),
    .Y(_00_[1])
  );
  NAND _27_ (
    .A(_06_),
    .B(CTR[2]),
    .Y(_10_)
  );
  NOT _28_ (
    .A(reset),
    .Y(_11_)
  );
  NOR _29_ (
    .A(_06_),
    .B(CTR[2]),
    .Y(_12_)
  );
  NOR _30_ (
    .A(_12_),
    .B(_11_),
    .Y(_13_)
  );
  NAND _31_ (
    .A(_13_),
    .B(_10_),
    .Y(_00_[2])
  );
  always @(posedge CLK)
      CTR[0] <= _00_[0];
  always @(posedge CLK)
      CTR[1] <= _00_[1];
  always @(posedge CLK)
      CTR[2] <= _00_[2];
endmodule

module mux_p2s_synth(sel, data_in, data_out);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  input [7:0] data_in;
  output data_out;
  input [2:0] sel;
  NAND _23_ (
    .A(data_in[7]),
    .B(sel[2]),
    .Y(_00_)
  );
  NOT _24_ (
    .A(sel[2]),
    .Y(_01_)
  );
  NAND _25_ (
    .A(data_in[3]),
    .B(_01_),
    .Y(_02_)
  );
  NAND _26_ (
    .A(_02_),
    .B(_00_),
    .Y(_03_)
  );
  NAND _27_ (
    .A(_03_),
    .B(sel[0]),
    .Y(_04_)
  );
  NOT _28_ (
    .A(sel[0]),
    .Y(_05_)
  );
  NOR _29_ (
    .A(data_in[2]),
    .B(sel[2]),
    .Y(_06_)
  );
  NOR _30_ (
    .A(data_in[6]),
    .B(_01_),
    .Y(_07_)
  );
  NOR _31_ (
    .A(_07_),
    .B(_06_),
    .Y(_08_)
  );
  NAND _32_ (
    .A(_08_),
    .B(_05_),
    .Y(_09_)
  );
  NAND _33_ (
    .A(_09_),
    .B(_04_),
    .Y(_10_)
  );
  NAND _34_ (
    .A(_10_),
    .B(sel[1]),
    .Y(_11_)
  );
  NOT _35_ (
    .A(sel[1]),
    .Y(_12_)
  );
  NAND _36_ (
    .A(data_in[1]),
    .B(_01_),
    .Y(_13_)
  );
  NAND _37_ (
    .A(data_in[5]),
    .B(sel[2]),
    .Y(_14_)
  );
  NAND _38_ (
    .A(_14_),
    .B(_13_),
    .Y(_15_)
  );
  NAND _39_ (
    .A(_15_),
    .B(sel[0]),
    .Y(_16_)
  );
  NOR _40_ (
    .A(data_in[0]),
    .B(sel[2]),
    .Y(_17_)
  );
  NOR _41_ (
    .A(data_in[4]),
    .B(_01_),
    .Y(_18_)
  );
  NOR _42_ (
    .A(_18_),
    .B(_17_),
    .Y(_19_)
  );
  NAND _43_ (
    .A(_19_),
    .B(_05_),
    .Y(_20_)
  );
  NAND _44_ (
    .A(_20_),
    .B(_16_),
    .Y(_21_)
  );
  NAND _45_ (
    .A(_21_),
    .B(_12_),
    .Y(_22_)
  );
  NAND _46_ (
    .A(_22_),
    .B(_11_),
    .Y(data_out)
  );
endmodule

module p2s_synth(IN_CLK_p2s, IN_LANE3_p2s, IN_LANE2_p2s, IN_LANE1_p2s, IN_LANE0_p2s, IN_CTR_p2s, IN_ENB_p2s, IN_RESET_p2s, IN_VALID_BS, OUT_LANE_p2s);
  input IN_CLK_p2s;
  input [2:0] IN_CTR_p2s;
  input IN_ENB_p2s;
  input [7:0] IN_LANE0_p2s;
  input [7:0] IN_LANE1_p2s;
  input [7:0] IN_LANE2_p2s;
  input [7:0] IN_LANE3_p2s;
  input IN_RESET_p2s;
  input IN_VALID_BS;
  output [3:0] OUT_LANE_p2s;
  wire [7:0] Q0_p2s;
  wire [7:0] Q1_p2s;
  wire [7:0] Q2_p2s;
  wire [7:0] Q3_p2s;
  wire valid_ffd;
  ffd_p2s_synth \ffd_lane0[0]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[0]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[0]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane0[1]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[1]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[1]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane0[2]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[2]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[2]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane0[3]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[3]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[3]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane0[4]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[4]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[4]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane0[5]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[5]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[5]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane0[6]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[6]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[6]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane0[7]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE0_p2s[7]),
    .ENB(IN_ENB_p2s),
    .Q(Q0_p2s[7]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[0]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[0]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[0]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[1]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[1]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[1]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[2]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[2]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[2]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[3]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[3]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[3]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[4]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[4]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[4]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[5]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[5]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[5]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[6]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[6]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[6]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane1[7]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE1_p2s[7]),
    .ENB(IN_ENB_p2s),
    .Q(Q1_p2s[7]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[0]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[0]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[0]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[1]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[1]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[1]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[2]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[2]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[2]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[3]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[3]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[3]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[4]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[4]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[4]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[5]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[5]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[5]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[6]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[6]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[6]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane2[7]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE2_p2s[7]),
    .ENB(IN_ENB_p2s),
    .Q(Q2_p2s[7]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane3[0]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[0]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[0]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane3[1]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[1]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[1]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane3[2]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[2]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[2]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane3[3]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[3]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[3]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane3[4]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[4]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[4]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane3[5]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[5]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[5]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth \ffd_lane3[6]  (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[6]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[6]),
    .valid_in(valid_ffd)
  );
  ffd_p2s_synth ffd_valid (
    .CLK(IN_CLK_p2s),
    .D(IN_LANE3_p2s[7]),
    .ENB(IN_ENB_p2s),
    .Q(Q3_p2s[7]),
    .valid_in(IN_VALID_BS),
    .valid_out(valid_ffd)
  );
  mux_p2s_synth mux_lane0 (
    .data_in(Q0_p2s),
    .data_out(OUT_LANE_p2s[0]),
    .sel(IN_CTR_p2s)
  );
  mux_p2s_synth mux_lane1 (
    .data_in(Q1_p2s),
    .data_out(OUT_LANE_p2s[1]),
    .sel(IN_CTR_p2s)
  );
  mux_p2s_synth mux_lane2 (
    .data_in(Q2_p2s),
    .data_out(OUT_LANE_p2s[2]),
    .sel(IN_CTR_p2s)
  );
  mux_p2s_synth mux_lane3 (
    .data_in(Q3_p2s),
    .data_out(OUT_LANE_p2s[3]),
    .sel(IN_CTR_p2s)
  );
endmodule

module p2s_s2p_synth(IN_CLK_2MHz, IN_CLK_250KHz, IN_LANE3, IN_LANE2, IN_LANE1, IN_LANE0, IN_ENB_TX, IN_RESET_TX, IN_VALID_TX, IN_ENB_RX, IN_RESET_RX, OUT_LANE3, OUT_LANE2, OUT_LANE1, OUT_LANE0);
  wire [1:0] CLK_RX;
  wire [2:0] CTR_TX;
  input IN_CLK_250KHz;
  input IN_CLK_2MHz;
  input IN_ENB_RX;
  input IN_ENB_TX;
  input [7:0] IN_LANE0;
  input [7:0] IN_LANE1;
  input [7:0] IN_LANE2;
  input [7:0] IN_LANE3;
  input IN_RESET_RX;
  input IN_RESET_TX;
  input IN_VALID_TX;
  wire [3:0] LANE;
  output [7:0] OUT_LANE0;
  output [7:0] OUT_LANE1;
  output [7:0] OUT_LANE2;
  output [7:0] OUT_LANE3;
  mux_ctr_synth ctr_tx_cond (
    .CLK(IN_CLK_2MHz),
    .CTR(CTR_TX),
    .reset(IN_RESET_TX),
    .valid_count(IN_VALID_TX)
  );
  s2p_synth low_rx_cond (
    .IN_CLK_s2p({ IN_CLK_250KHz, IN_CLK_2MHz }),
    .IN_DIR_s2p(1'b1),
    .IN_ENB_s2p(IN_ENB_RX),
    .IN_LANE_s2p(LANE),
    .IN_MODO_s2p(2'b00),
    .OUT_LANE0_s2p(OUT_LANE0),
    .OUT_LANE1_s2p(OUT_LANE1),
    .OUT_LANE2_s2p(OUT_LANE2),
    .OUT_LANE3_s2p(OUT_LANE3)
  );
  p2s_synth low_tx_cond (
    .IN_CLK_p2s(IN_CLK_2MHz),
    .IN_CTR_p2s(CTR_TX),
    .IN_ENB_p2s(IN_ENB_TX),
    .IN_LANE0_p2s(IN_LANE0),
    .IN_LANE1_p2s(IN_LANE1),
    .IN_LANE2_p2s(IN_LANE2),
    .IN_LANE3_p2s(IN_LANE3),
    .IN_RESET_p2s(IN_RESET_TX),
    .IN_VALID_BS(IN_VALID_TX),
    .OUT_LANE_p2s(LANE)
  );
  assign CLK_RX = { IN_CLK_250KHz, IN_CLK_2MHz };
endmodule

module s2p_synth(IN_CLK_s2p, IN_LANE_s2p, IN_MODO_s2p, IN_DIR_s2p, IN_ENB_s2p, OUT_LANE3_s2p, OUT_LANE2_s2p, OUT_LANE1_s2p, OUT_LANE0_s2p);
  input [1:0] IN_CLK_s2p;
  input IN_DIR_s2p;
  input IN_ENB_s2p;
  input [3:0] IN_LANE_s2p;
  input [1:0] IN_MODO_s2p;
  output [7:0] OUT_LANE0_s2p;
  output [7:0] OUT_LANE1_s2p;
  output [7:0] OUT_LANE2_s2p;
  output [7:0] OUT_LANE3_s2p;
  wire [7:0] P0_synth_s2p;
  wire [7:0] P1_synth_s2p;
  wire [7:0] P2_synth_s2p;
  wire [7:0] P3_synth_s2p;
  ffd_s2p_synth \ffd_lane0[0]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[0]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[0])
  );
  ffd_s2p_synth \ffd_lane0[1]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[1]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[1])
  );
  ffd_s2p_synth \ffd_lane0[2]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[2]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[2])
  );
  ffd_s2p_synth \ffd_lane0[3]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[3]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[3])
  );
  ffd_s2p_synth \ffd_lane0[4]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[4]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[4])
  );
  ffd_s2p_synth \ffd_lane0[5]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[5]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[5])
  );
  ffd_s2p_synth \ffd_lane0[6]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[6]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[6])
  );
  ffd_s2p_synth \ffd_lane0[7]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P0_synth_s2p[7]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE0_s2p[7])
  );
  ffd_s2p_synth \ffd_lane1[0]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[0]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[0])
  );
  ffd_s2p_synth \ffd_lane1[1]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[1]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[1])
  );
  ffd_s2p_synth \ffd_lane1[2]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[2]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[2])
  );
  ffd_s2p_synth \ffd_lane1[3]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[3]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[3])
  );
  ffd_s2p_synth \ffd_lane1[4]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[4]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[4])
  );
  ffd_s2p_synth \ffd_lane1[5]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[5]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[5])
  );
  ffd_s2p_synth \ffd_lane1[6]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[6]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[6])
  );
  ffd_s2p_synth \ffd_lane1[7]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P1_synth_s2p[7]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE1_s2p[7])
  );
  ffd_s2p_synth \ffd_lane2[0]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[0]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[0])
  );
  ffd_s2p_synth \ffd_lane2[1]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[1]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[1])
  );
  ffd_s2p_synth \ffd_lane2[2]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[2]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[2])
  );
  ffd_s2p_synth \ffd_lane2[3]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[3]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[3])
  );
  ffd_s2p_synth \ffd_lane2[4]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[4]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[4])
  );
  ffd_s2p_synth \ffd_lane2[5]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[5]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[5])
  );
  ffd_s2p_synth \ffd_lane2[6]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[6]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[6])
  );
  ffd_s2p_synth \ffd_lane2[7]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P2_synth_s2p[7]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE2_s2p[7])
  );
  ffd_s2p_synth \ffd_lane3[0]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[0]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[0])
  );
  ffd_s2p_synth \ffd_lane3[1]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[1]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[1])
  );
  ffd_s2p_synth \ffd_lane3[2]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[2]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[2])
  );
  ffd_s2p_synth \ffd_lane3[3]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[3]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[3])
  );
  ffd_s2p_synth \ffd_lane3[4]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[4]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[4])
  );
  ffd_s2p_synth \ffd_lane3[5]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[5]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[5])
  );
  ffd_s2p_synth \ffd_lane3[6]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[6]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[6])
  );
  ffd_s2p_synth \ffd_lane3[7]  (
    .CLK(IN_CLK_s2p[1]),
    .D(P3_synth_s2p[7]),
    .ENB(IN_ENB_s2p),
    .Q(OUT_LANE3_s2p[7])
  );
  s2p_reg_synth reg_lane0 (
    .CLK(IN_CLK_s2p[0]),
    .DIR(IN_DIR_s2p),
    .ENB(IN_ENB_s2p),
    .MODO(IN_MODO_s2p),
    .Q(P0_synth_s2p),
    .S_IN(IN_LANE_s2p[0])
  );
  s2p_reg_synth reg_lane1 (
    .CLK(IN_CLK_s2p[0]),
    .DIR(IN_DIR_s2p),
    .ENB(IN_ENB_s2p),
    .MODO(IN_MODO_s2p),
    .Q(P1_synth_s2p),
    .S_IN(IN_LANE_s2p[1])
  );
  s2p_reg_synth reg_lane2 (
    .CLK(IN_CLK_s2p[0]),
    .DIR(IN_DIR_s2p),
    .ENB(IN_ENB_s2p),
    .MODO(IN_MODO_s2p),
    .Q(P2_synth_s2p),
    .S_IN(IN_LANE_s2p[2])
  );
  s2p_reg_synth reg_lane3 (
    .CLK(IN_CLK_s2p[0]),
    .DIR(IN_DIR_s2p),
    .ENB(IN_ENB_s2p),
    .MODO(IN_MODO_s2p),
    .Q(P3_synth_s2p),
    .S_IN(IN_LANE_s2p[3])
  );
endmodule

module s2p_reg_synth(D, MODO, CLK, ENB, DIR, S_IN, Q, S_OUT);
  wire [7:0] _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  input CLK;
  input [7:0] D;
  input DIR;
  input ENB;
  input [1:0] MODO;
  output [7:0] Q;
  reg [7:0] Q;
  input S_IN;
  output S_OUT;
  reg S_OUT;
  NAND _085_ (
    .A(_025_),
    .B(Q[0]),
    .Y(_048_)
  );
  NAND _086_ (
    .A(Q[2]),
    .B(DIR),
    .Y(_049_)
  );
  NAND _087_ (
    .A(_049_),
    .B(_048_),
    .Y(_050_)
  );
  NAND _088_ (
    .A(_050_),
    .B(_047_),
    .Y(_051_)
  );
  NAND _089_ (
    .A(_051_),
    .B(_046_),
    .Y(_052_)
  );
  NAND _090_ (
    .A(_052_),
    .B(ENB),
    .Y(_053_)
  );
  NAND _091_ (
    .A(Q[1]),
    .B(_023_),
    .Y(_054_)
  );
  NAND _092_ (
    .A(_054_),
    .B(_053_),
    .Y(_000_[1])
  );
  NAND _093_ (
    .A(D[2]),
    .B(MODO[1]),
    .Y(_055_)
  );
  NAND _094_ (
    .A(Q[1]),
    .B(_025_),
    .Y(_056_)
  );
  NAND _095_ (
    .A(Q[3]),
    .B(DIR),
    .Y(_057_)
  );
  NAND _096_ (
    .A(_057_),
    .B(_056_),
    .Y(_058_)
  );
  NAND _097_ (
    .A(_058_),
    .B(_047_),
    .Y(_059_)
  );
  NAND _098_ (
    .A(_059_),
    .B(_055_),
    .Y(_060_)
  );
  NAND _099_ (
    .A(_060_),
    .B(ENB),
    .Y(_061_)
  );
  NAND _100_ (
    .A(Q[2]),
    .B(_023_),
    .Y(_062_)
  );
  NAND _101_ (
    .A(_062_),
    .B(_061_),
    .Y(_000_[2])
  );
  NAND _102_ (
    .A(D[3]),
    .B(MODO[1]),
    .Y(_063_)
  );
  NAND _103_ (
    .A(Q[2]),
    .B(_025_),
    .Y(_064_)
  );
  NAND _104_ (
    .A(Q[4]),
    .B(DIR),
    .Y(_065_)
  );
  NAND _105_ (
    .A(_065_),
    .B(_064_),
    .Y(_066_)
  );
  NAND _106_ (
    .A(_066_),
    .B(_047_),
    .Y(_067_)
  );
  NAND _107_ (
    .A(_067_),
    .B(_063_),
    .Y(_068_)
  );
  NAND _108_ (
    .A(_068_),
    .B(ENB),
    .Y(_069_)
  );
  NAND _109_ (
    .A(Q[3]),
    .B(_023_),
    .Y(_070_)
  );
  NAND _110_ (
    .A(_070_),
    .B(_069_),
    .Y(_000_[3])
  );
  NAND _111_ (
    .A(D[4]),
    .B(MODO[1]),
    .Y(_071_)
  );
  NAND _112_ (
    .A(Q[3]),
    .B(_025_),
    .Y(_072_)
  );
  NAND _113_ (
    .A(Q[5]),
    .B(DIR),
    .Y(_073_)
  );
  NAND _114_ (
    .A(_073_),
    .B(_072_),
    .Y(_074_)
  );
  NAND _115_ (
    .A(_074_),
    .B(_047_),
    .Y(_075_)
  );
  NAND _116_ (
    .A(_075_),
    .B(_071_),
    .Y(_076_)
  );
  NAND _117_ (
    .A(_076_),
    .B(ENB),
    .Y(_077_)
  );
  NAND _118_ (
    .A(Q[4]),
    .B(_023_),
    .Y(_078_)
  );
  NAND _119_ (
    .A(_078_),
    .B(_077_),
    .Y(_000_[4])
  );
  NAND _120_ (
    .A(D[5]),
    .B(MODO[1]),
    .Y(_079_)
  );
  NAND _121_ (
    .A(Q[4]),
    .B(_025_),
    .Y(_080_)
  );
  NAND _122_ (
    .A(Q[6]),
    .B(DIR),
    .Y(_081_)
  );
  NAND _123_ (
    .A(_081_),
    .B(_080_),
    .Y(_082_)
  );
  NAND _124_ (
    .A(_082_),
    .B(_047_),
    .Y(_083_)
  );
  NAND _125_ (
    .A(_083_),
    .B(_079_),
    .Y(_084_)
  );
  NAND _126_ (
    .A(_084_),
    .B(ENB),
    .Y(_002_)
  );
  NAND _127_ (
    .A(Q[5]),
    .B(_023_),
    .Y(_003_)
  );
  NAND _128_ (
    .A(_003_),
    .B(_002_),
    .Y(_000_[5])
  );
  NAND _129_ (
    .A(D[6]),
    .B(MODO[1]),
    .Y(_004_)
  );
  NAND _130_ (
    .A(Q[5]),
    .B(_025_),
    .Y(_005_)
  );
  NAND _131_ (
    .A(DIR),
    .B(Q[7]),
    .Y(_006_)
  );
  NAND _132_ (
    .A(_006_),
    .B(_005_),
    .Y(_007_)
  );
  NAND _133_ (
    .A(_007_),
    .B(_047_),
    .Y(_008_)
  );
  NAND _134_ (
    .A(_008_),
    .B(_004_),
    .Y(_009_)
  );
  NAND _135_ (
    .A(_009_),
    .B(ENB),
    .Y(_010_)
  );
  NAND _136_ (
    .A(Q[6]),
    .B(_023_),
    .Y(_011_)
  );
  NAND _137_ (
    .A(_011_),
    .B(_010_),
    .Y(_000_[6])
  );
  NOR _138_ (
    .A(ENB),
    .B(Q[7]),
    .Y(_012_)
  );
  NAND _139_ (
    .A(Q[6]),
    .B(_025_),
    .Y(_013_)
  );
  NAND _140_ (
    .A(_013_),
    .B(_027_),
    .Y(_014_)
  );
  NAND _141_ (
    .A(_014_),
    .B(_035_),
    .Y(_015_)
  );
  NAND _142_ (
    .A(D[7]),
    .B(MODO[1]),
    .Y(_016_)
  );
  NAND _143_ (
    .A(_016_),
    .B(_015_),
    .Y(_017_)
  );
  NAND _144_ (
    .A(S_IN),
    .B(DIR),
    .Y(_018_)
  );
  NAND _145_ (
    .A(_018_),
    .B(_013_),
    .Y(_019_)
  );
  NAND _146_ (
    .A(_019_),
    .B(_029_),
    .Y(_020_)
  );
  NAND _147_ (
    .A(_020_),
    .B(ENB),
    .Y(_021_)
  );
  NOR _148_ (
    .A(_021_),
    .B(_017_),
    .Y(_022_)
  );
  NOR _149_ (
    .A(_022_),
    .B(_012_),
    .Y(_000_[7])
  );
  NOT _150_ (
    .A(ENB),
    .Y(_023_)
  );
  NAND _151_ (
    .A(_023_),
    .B(S_OUT),
    .Y(_024_)
  );
  NOT _152_ (
    .A(DIR),
    .Y(_025_)
  );
  NAND _153_ (
    .A(_025_),
    .B(Q[7]),
    .Y(_026_)
  );
  NAND _154_ (
    .A(DIR),
    .B(Q[0]),
    .Y(_027_)
  );
  NAND _155_ (
    .A(_027_),
    .B(_026_),
    .Y(_028_)
  );
  NOR _156_ (
    .A(MODO[0]),
    .B(MODO[1]),
    .Y(_029_)
  );
  NOT _157_ (
    .A(_029_),
    .Y(_030_)
  );
  NOR _158_ (
    .A(_030_),
    .B(_023_),
    .Y(_031_)
  );
  NAND _159_ (
    .A(_031_),
    .B(_028_),
    .Y(_032_)
  );
  NAND _160_ (
    .A(_032_),
    .B(_024_),
    .Y(_001_)
  );
  NOR _161_ (
    .A(ENB),
    .B(Q[0]),
    .Y(_033_)
  );
  NOT _162_ (
    .A(MODO[0]),
    .Y(_034_)
  );
  NOR _163_ (
    .A(_034_),
    .B(MODO[1]),
    .Y(_035_)
  );
  NAND _164_ (
    .A(Q[1]),
    .B(DIR),
    .Y(_036_)
  );
  NAND _165_ (
    .A(_036_),
    .B(_026_),
    .Y(_037_)
  );
  NAND _166_ (
    .A(_037_),
    .B(_035_),
    .Y(_038_)
  );
  NAND _167_ (
    .A(D[0]),
    .B(MODO[1]),
    .Y(_039_)
  );
  NAND _168_ (
    .A(_039_),
    .B(_038_),
    .Y(_040_)
  );
  NAND _169_ (
    .A(S_IN),
    .B(_025_),
    .Y(_041_)
  );
  NAND _170_ (
    .A(_041_),
    .B(_036_),
    .Y(_042_)
  );
  NAND _171_ (
    .A(_042_),
    .B(_029_),
    .Y(_043_)
  );
  NAND _172_ (
    .A(_043_),
    .B(ENB),
    .Y(_044_)
  );
  NOR _173_ (
    .A(_044_),
    .B(_040_),
    .Y(_045_)
  );
  NOR _174_ (
    .A(_045_),
    .B(_033_),
    .Y(_000_[0])
  );
  NAND _175_ (
    .A(D[1]),
    .B(MODO[1]),
    .Y(_046_)
  );
  NOT _176_ (
    .A(MODO[1]),
    .Y(_047_)
  );
  always @(posedge CLK)
      Q[0] <= _000_[0];
  always @(posedge CLK)
      Q[1] <= _000_[1];
  always @(posedge CLK)
      Q[2] <= _000_[2];
  always @(posedge CLK)
      Q[3] <= _000_[3];
  always @(posedge CLK)
      Q[4] <= _000_[4];
  always @(posedge CLK)
      Q[5] <= _000_[5];
  always @(posedge CLK)
      Q[6] <= _000_[6];
  always @(posedge CLK)
      Q[7] <= _000_[7];
  always @(posedge CLK)
      S_OUT <= _001_;
endmodule
