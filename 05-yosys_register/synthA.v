/* Generated by Yosys 0.7+560 (git sha1 d9a2b430, gcc 7.3.1 -fPIC -Os) */

(* top =  1  *)
(* src = "registro_A.v:3" *)
module registro_A(Q, S_OUT, D, MODO, CLK, ENB, DIR, S_IN);
  (* src = "registro_A.v:13" *)
  wire [3:0] _00_;
  (* src = "registro_A.v:13" *)
  wire _01_;
  wire _02_;
  wire [1:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [3:0] _08_;
  (* src = "registro_A.v:18|<techmap.v>:432" *)
  wire [7:0] _09_;
  (* src = "registro_A.v:18|<techmap.v>:428" *)
  wire [3:0] _10_;
  wire [3:0] _11_;
  wire _12_;
  wire [3:0] _13_;
  (* src = "registro_A.v:18|<techmap.v>:445" *)
  wire _14_;
  (* src = "registro_A.v:10" *)
  input CLK;
  (* src = "registro_A.v:8" *)
  input [3:0] D;
  (* src = "registro_A.v:10" *)
  input DIR;
  (* src = "registro_A.v:10" *)
  input ENB;
  (* src = "registro_A.v:9" *)
  input [1:0] MODO;
  (* src = "registro_A.v:5" *)
  output [3:0] Q;
  reg [3:0] Q;
  (* src = "registro_A.v:10" *)
  input S_IN;
  (* src = "registro_A.v:6" *)
  output S_OUT;
  reg S_OUT;
  assign _10_[2] = _09_[2] |(* src = "registro_A.v:18|<techmap.v>:441" *)  _09_[6];
  assign _10_[3] = _09_[3] |(* src = "registro_A.v:18|<techmap.v>:441" *)  _09_[7];
  assign _10_[1] = _09_[1] |(* src = "registro_A.v:18|<techmap.v>:441" *)  _09_[5];
  assign _10_[0] = _09_[0] |(* src = "registro_A.v:18|<techmap.v>:441" *)  _09_[4];
  assign _14_ = _12_ |(* src = "registro_A.v:18|<techmap.v>:445" *)  _07_;
  assign _04_ = _03_[0] |(* src = "registro_A.v:18" *)  MODO[1];
  assign _02_ = MODO[0] |(* src = "registro_A.v:18" *)  MODO[1];
  assign _07_ = ~(* src = "registro_A.v:18" *) _02_;
  assign _12_ = ~(* src = "registro_A.v:18" *) _04_;
  assign _13_[0] = DIR ? (* src = "registro_A.v:21" *) Q[1] : S_IN;
  assign _08_[1] = DIR ? (* src = "registro_A.v:21" *) Q[2] : Q[0];
  assign _08_[2] = DIR ? (* src = "registro_A.v:21" *) Q[3] : Q[1];
  assign _13_[3] = DIR ? (* src = "registro_A.v:21" *) S_IN : Q[2];
  assign _00_[0] = ENB ? (* src = "registro_A.v:14" *) _11_[0] : Q[0];
  assign _00_[1] = ENB ? (* src = "registro_A.v:14" *) _11_[1] : Q[1];
  assign _00_[2] = ENB ? (* src = "registro_A.v:14" *) _11_[2] : Q[2];
  assign _00_[3] = ENB ? (* src = "registro_A.v:14" *) _11_[3] : Q[3];
  assign _11_[0] = _14_ ? (* src = "registro_A.v:18|<techmap.v>:445" *) _10_[0] : D[0];
  assign _11_[1] = _14_ ? (* src = "registro_A.v:18|<techmap.v>:445" *) _10_[1] : D[1];
  assign _11_[2] = _14_ ? (* src = "registro_A.v:18|<techmap.v>:445" *) _10_[2] : D[2];
  assign _11_[3] = _14_ ? (* src = "registro_A.v:18|<techmap.v>:445" *) _10_[3] : D[3];
  assign _05_ = DIR ? (* src = "registro_A.v:21" *) Q[0] : Q[3];
  assign _06_ = _02_ ? (* src = "registro_A.v:18" *) 1'h0 : _05_;
  assign _01_ = ENB ? (* src = "registro_A.v:14" *) _06_ : S_OUT;
  assign _08_[0] = DIR ? (* src = "registro_A.v:32" *) Q[1] : Q[3];
  assign _08_[3] = DIR ? (* src = "registro_A.v:32" *) Q[0] : Q[2];
  (* src = "registro_A.v:13" *)
  always @(posedge CLK)
      Q[0] <= _00_[0];
  (* src = "registro_A.v:13" *)
  always @(posedge CLK)
      Q[1] <= _00_[1];
  (* src = "registro_A.v:13" *)
  always @(posedge CLK)
      Q[2] <= _00_[2];
  (* src = "registro_A.v:13" *)
  always @(posedge CLK)
      Q[3] <= _00_[3];
  (* src = "registro_A.v:13" *)
  always @(posedge CLK)
      S_OUT <= _01_;
  assign _09_[4] = _13_[0] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _07_;
  assign _09_[5] = _08_[1] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _07_;
  assign _09_[6] = _08_[2] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _07_;
  assign _09_[7] = _13_[3] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _07_;
  assign _09_[0] = _08_[0] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _12_;
  assign _09_[1] = _08_[1] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _12_;
  assign _09_[2] = _08_[2] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _12_;
  assign _09_[3] = _08_[3] &(* src = "registro_A.v:18|<techmap.v>:434" *)  _12_;
  assign _03_[0] = MODO[0] ^(* src = "registro_A.v:18" *)  1'h1;

parameter PwrC = 2;
always @(posedge Q or negedge Q) begin
  letest.m1.PwrCntr[PwrC] = letest.m1.PwrCntr[PwrC] + 1;
end // end counter
endmodule
